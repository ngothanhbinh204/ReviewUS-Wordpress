  <div id="globe-container">
      <div class="loading" id="loading">ƒêang t·∫£i qu·∫£ ƒë·ªãa c·∫ßu...</div>
      <div id="default_info"
          class="group_info flex flex-col w-100 visible relative top-[10%] z-20 p-[20px] lg:absolute lg:right-[20px] lg:w-[450px] lg:bg-white lg:pt-[20px] 2xl:w-[480px]">
          <span class="text-base text-sm font-normal top_content">
              Canada, naturally.
          </span>
          <h4 class="leading-tight text-primary font-bold text-2xl md:text-[52px]">Once-in-a-lifetime happens all
              the time.
          </h4>
          <p class="text-base text-lg content">
              Whether it‚Äôs postcard-worthy views at every pitstop or warm-hearted folks always eager to offer a
              helping hand, the exceptional is just a part of everyday life in Canada. Wandering through cities can
              sometimes mean pausing your commute for a four-legged passerby. Sitting down to dinner often comes with
              an epic backdrop. And if the northern lights start stirring overhead? In the North, that's just a
              regular Tuesday. Extraordinary experiences come naturally here.


          </p>

          <a href="" class="button_primary"> Learn More</a>

      </div>


      <!-- <div class="controls">
            <button class="control-btn" onclick="resetView()">üè† Reset View</button>
            <button class="control-btn" onclick="toggleRotation()">‚è∏Ô∏è Pause/Play</button>
        </div> -->

      <div id="globe"></div>

      <div class="info-popup" id="info-popup">
          <button class="close-btn" onclick="closePopup()">&times;</button>
          <div class="box_img relative h-[400px] ">
              <img class="h-full w-full object-cover"
                  src="http://destinationcanada.local/wp-content/uploads/2025/06/DC2018_Clara_Amfo-03975-min-1.webp"
                  alt="">
          </div>
          <h3 class="break-words text-[26px] font-bold leading-tight lg:text-[32px] 2xl:text-[36px] text-primary mb-4 !font-medium"
              id="popup-title"></h3>
          <p class="text-base" id="popup-description"></p>
          <div class="info-stats flex flex-col gap-1 md:gap-3">
              <a class="button_primary" href="">Discover Northwest Territories</a>
              <a class="button_redirect" id="popup-population" href="">Visit Spectacular Northwest Territories</a>
              <a class="button_redirect" id="popup-area" href="">Visit Spectacular Northwest Territories</a>

          </div>
      </div>
  </div>

  <script src="https://unpkg.com/globe.gl@2.24.3/dist/globe.gl.min.js"></script>
  <script>
let globe;
let isRotating = true;
let countries = [];
const VIETNAM_LAT = 14.0583;
const VIETNAM_LON = 108.2772;

// D·ªØ li·ªáu m·∫´u cho c√°c qu·ªëc gia
const countryData = {
    'Vietnam': {
        name: 'Vi·ªát Nam',
        description: 'Qu·ªëc gia ƒê√¥ng Nam √Å v·ªõi vƒÉn h√≥a phong ph√∫ v√† l·ªãch s·ª≠ l√¢u ƒë·ªùi.',
        population: '97.3 tri·ªáu',
        area: '331,212 km¬≤'
    },
    'China': {
        name: 'Trung Qu·ªëc',
        description: 'Qu·ªëc gia ƒë√¥ng d√¢n nh·∫•t th·∫ø gi·ªõi v·ªõi n·ªÅn vƒÉn minh 5000 nƒÉm tu·ªïi.',
        population: '1.4 t·ª∑',
        area: '9.6 tri·ªáu km¬≤'
    },
    'United States': {
        name: 'Hoa K·ª≥',
        description: 'Si√™u c∆∞·ªùng th·∫ø gi·ªõi v·ªõi n·ªÅn kinh t·∫ø v√† c√¥ng ngh·ªá ph√°t tri·ªÉn.',
        population: '331 tri·ªáu',
        area: '9.8 tri·ªáu km¬≤'
    },
    'Japan': {
        name: 'Nh·∫≠t B·∫£n',
        description: 'ƒê·∫•t n∆∞·ªõc m·∫∑t tr·ªùi m·ªçc v·ªõi c√¥ng ngh·ªá hi·ªán ƒë·∫°i v√† vƒÉn h√≥a truy·ªÅn th·ªëng.',
        population: '125 tri·ªáu',
        area: '377,975 km¬≤'
    },
    'Germany': {
        name: 'ƒê·ª©c',
        description: 'Trung t√¢m kinh t·∫ø v√† c√¥ng nghi·ªáp c·ªßa ch√¢u √Çu.',
        population: '83 tri·ªáu',
        area: '357,022 km¬≤'
    },
    'Brazil': {
        name: 'Brazil',
        description: 'Qu·ªëc gia l·ªõn nh·∫•t Nam M·ªπ v·ªõi r·ª´ng Amazon r·ªông l·ªõn.',
        population: '215 tri·ªáu',
        area: '8.5 tri·ªáu km¬≤'
    },
    'India': {
        name: '·∫§n ƒê·ªô',
        description: 'N·ªÅn vƒÉn minh c·ªï ƒë·∫°i v·ªõi s·ª± ƒëa d·∫°ng vƒÉn h√≥a v√† t√¥n gi√°o.',
        population: '1.38 t·ª∑',
        area: '3.3 tri·ªáu km¬≤'
    },
    'Australia': {
        name: '√öc',
        description: 'L·ª•c ƒë·ªãa ri√™ng bi·ªát v·ªõi ƒë·ªông v·∫≠t hoang d√£ ƒë·ªôc ƒë√°o.',
        population: '25.7 tri·ªáu',
        area: '7.7 tri·ªáu km¬≤'
    }
};

async function initGlobe() {
    try {
        // T·∫£i d·ªØ li·ªáu ƒë·ªãa l√Ω
        const response = await fetch(
            'https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson');
        const worldData = await response.json();

        countries = worldData.features;

        // Kh·ªüi t·∫°o globe
        globe = Globe()
            (document.getElementById('globe'))
            .globeImageUrl('//unpkg.com/three-globe/example/img/earth-night.jpg')
            .backgroundImageUrl('//unpkg.com/three-globe/example/img/night-sky.png')
            .lineHoverPrecision(0)
            .polygonsData(countries)
            .polygonAltitude(0.01)
            .polygonCapColor(feat => feat === hoverD ? 'rgba(255, 255, 255, 0.8)' : 'rgba(120, 120, 120, 0.6)')
            .polygonSideColor(() => 'rgba(0, 0, 0, 0.2)')
            .polygonStrokeColor(() => '#111')
            .polygonLabel(({
                properties: d
            }) => `
                        <div style="background: rgba(0,0,0,0.8); padding: 8px; border-radius: 5px; color: white;">
                            <b>${d.NAME || d.name || 'Unknown'}</b>
                        </div>
                    `)
            .onPolygonHover(hoverD => {
                globe.polygonCapColor(feat => feat === hoverD ? 'rgba(255, 255, 255, 0.8)' :
                    'rgba(120, 120, 120, 0.6)');
                document.body.style.cursor = hoverD ? 'pointer' : 'grab';
            })
            .onPolygonClick((polygon, event) => {
                if (polygon) {
                    const countryName = polygon.properties.NAME || polygon.properties.name;
                    showCountryInfo(countryName, event);
                    focusOnCountry(polygon);
                }
            })
            .width(document.getElementById('globe-container').offsetWidth)
            .height(1200);

        // T·ª± ƒë·ªông xoay
        globe.controls().autoRotate = false;
        globe.controls().autoRotateSpeed = 0.5;

        // V√¥ hi·ªáu h√≥a zoom b·∫±ng scroll wheel
        globe.controls().enableZoom = true; // V·∫´n cho ph√©p zoom b·∫±ng c√°ch kh√°c
        globe.controls().enablePan = false; // T·∫Øt pan

        // V√¥ hi·ªáu h√≥a scroll wheel zoom
        const globeElement = document.getElementById('globe');
        globeElement.addEventListener('wheel', function(e) {
            e.preventDefault();
            e.stopPropagation();
        }, {
            passive: false
        });

        // Ch·ªâ cho ph√©p drag ƒë·ªÉ rotate
        globe.controls().mouseButtons = {
            LEFT: THREE.MOUSE.ROTATE,
            MIDDLE: null, // T·∫Øt middle mouse
            RIGHT: null // T·∫Øt right mouse
        };

        // Gi·ªõi h·∫°n kho·∫£ng c√°ch zoom
        globe.controls().minDistance = 150;
        globe.controls().maxDistance = 300;

        // ·∫®n loading
        document.getElementById('loading').style.display = 'none';

        // focusOnLocation(VIETNAM_LAT, VIETNAM_LON);
        focusOnLocation(11.6, 108.9); // Ninh Thu·∫≠n


    } catch (error) {
        console.error('L·ªói khi t·∫£i d·ªØ li·ªáu:', error);
        document.getElementById('loading').innerHTML = 'L·ªói khi t·∫£i d·ªØ li·ªáu';
    }
}

let hoverD;

function showCountryInfo(countryName, event) {
    const popup = document.getElementById('info-popup');
    const data = countryData[countryName] || {
        name: countryName,
        description: 'Th√¥ng tin chi ti·∫øt s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t s·ªõm.',
        population: 'ƒêang c·∫≠p nh·∫≠t',
        area: 'ƒêang c·∫≠p nh·∫≠t'
    };

    document.getElementById('popup-title').textContent = data.name;
    document.getElementById('popup-description').textContent = data.description;
    document.getElementById('popup-population').textContent = data.population;
    document.getElementById('popup-area').textContent = data.area;

    // V·ªã tr√≠ popup
    const container = document.getElementById('globe-container');
    const rect = container.getBoundingClientRect();
    const maxX = container.offsetWidth - 370;
    const maxY = 600 - 250;

    const x = Math.min(Math.max(0, event.clientX - rect.left), maxX);
    const y = Math.min(Math.max(0, event.clientY - rect.top), maxY);

    popup.style.left = '0px';
    popup.style.top = '0px';
    popup.classList.add('show');
}

function closePopup() {
    document.getElementById('info-popup').classList.remove('show');
}

function focusOnCountry(polygon) {
    if (!polygon.geometry || !polygon.geometry.coordinates) return;

    // T√≠nh to√°n t·ªça ƒë·ªô trung t√¢m
    let lat = 0,
        lng = 0,
        count = 0;

    function processCoords(coords) {
        if (Array.isArray(coords[0])) {
            coords.forEach(processCoords);
        } else {
            lng += coords[0];
            lat += coords[1];
            count++;
        }
    }

    if (polygon.geometry.type === 'Polygon') {
        processCoords(polygon.geometry.coordinates[0]);
    } else if (polygon.geometry.type === 'MultiPolygon') {
        polygon.geometry.coordinates.forEach(poly => processCoords(poly[0]));
    }

    if (count > 0) {
        lat /= count;
        lng /= count;

        // Di chuy·ªÉn camera ƒë·∫øn v·ªã tr√≠
        globe.pointOfView({
            lat,
            lng,
            altitude: 0.2
        }, 1500);
    }
}

function resetView() {
    globe.pointOfView({
        lat: 0,
        lng: 0,
        altitude: 1
    }, 1000);
    closePopup();
}

function toggleRotation() {
    isRotating = !isRotating;
    globe.controls().autoRotate = isRotating;

    const btn = document.querySelector('.controls .control-btn:nth-child(2)');
    btn.innerHTML = isRotating ? '‚è∏Ô∏è Pause/Play' : '‚ñ∂Ô∏è Pause/Play';
}

function focusOnLocation(lat, lon, distance = 120) {
    const target = latLonToVector3(lat, lon, 100);

    gsap.to(camera.position, {
        duration: 1.5,
        x: target.x * (distance / 100),
        y: target.y * (distance / 100),
        z: target.z * (distance / 100),
        onUpdate: () => {
            camera.lookAt(0, 0, 0);
        }
    });
}

function latLonToVector3(lat, lon, radius = 100) {
    const phi = (90 - lat) * (Math.PI / 180);
    const theta = (lon + 180) * (Math.PI / 180);

    const x = -radius * Math.sin(phi) * Math.cos(theta);
    const z = radius * Math.sin(phi) * Math.sin(theta);
    const y = radius * Math.cos(phi);

    return new THREE.Vector3(x, y, z);
}



// X·ª≠ l√Ω resize
window.addEventListener('resize', () => {
    if (globe) {
        const container = document.getElementById('globe-container');
        globe.width(container.offsetWidth).height(1200);
    }
});

// ƒê√≥ng popup khi click outside
document.addEventListener('click', (e) => {
    const popup = document.getElementById('info-popup');
    if (!popup.contains(e.target) && !e.target.closest('#globe')) {
        closePopup();
    }
});

// NgƒÉn scroll wheel zoom tr√™n to√†n b·ªô container
document.getElementById('globe-container').addEventListener('wheel', function(e) {
    // Ch·ªâ ngƒÉn wheel event tr√™n globe, kh√¥ng ·∫£nh h∆∞·ªüng scroll trang
    if (e.target.closest('#globe')) {
        e.preventDefault();
        e.stopPropagation();
    }
}, {
    passive: false
});

// Kh·ªüi t·∫°o
initGlobe();
  </script>
